<?xml version="1.0"?>
<project name="wgspring-dbTargets">

    <var file="${app.dir}/conf/${servlet.name}.properties"/>
    <var file="${app.dir}/conf/${servlet.name}.password.properties"/>
    
    <!-- Override properties with environment-specific ones, if they exist -->
    <property environment="sys_env" />
    <propertycopy name="wgspring.migrations.db.username" from="${sys_env.ENV_PROPERTY_PREFIX}.wgspring.migrations.db.username" override="true" silent="true"/>
    <propertycopy name="wgspring.migrations.db.password" from="${sys_env.ENV_PROPERTY_PREFIX}.wgspring.migrations.db.password" override="true" silent="true"/>
    <propertycopy name="wgspring.db.host" from="${sys_env.ENV_PROPERTY_PREFIX}.wgspring.db.host" override="true" silent="true"/>
    <propertycopy name="wgspring.db.port" from="${sys_env.ENV_PROPERTY_PREFIX}.wgspring.db.port" override="true" silent="true"/>
    <propertycopy name="wgspring.db.dbname" from="${sys_env.ENV_PROPERTY_PREFIX}.wgspring.db.dbname" override="true" silent="true"/>
    <propertycopy name="wgspring.db.schema" from="${sys_env.ENV_PROPERTY_PREFIX}.wgspring.db.schema" override="true" silent="true"/>
    <propertycopy name="wgspring.hbm2ddl.auto" from="${sys_env.ENV_PROPERTY_PREFIX}.wgspring.hbm2ddl.auto" override="true" silent="true"/>

    <if>
        <equals arg1="${wgspring.hbm2ddl.auto}" arg2="validate"/>
        <then>
            <property name="wgspring.db.migrate" value="true"/>
        </then>
    </if>
    
    <!-- these imports aren't necessary but eclipse displays errors if they're not here-->
    <import file="deployTargets.xml"/>
    <import file="ivyTargets.xml"/>
    <import file="testTargets.xml"/>

    <target name="check-props" description="view localized properties for debugging purposes">
        <echo>
              Property "wgspring.migrations.db.username"  is ${wgspring.migrations.db.username}
              Property "wgspring.migrations.db.password"  is ${wgspring.migrations.db.password}
              Property "wgspring.db.dbname"    is ${wgspring.db.dbname}
              Property "wgspring.db.host"      is ${wgspring.db.host}
              Property "wgspring.db.port"      is ${wgspring.db.port}
              Property "wgspring.db.schema"    is ${wgspring.db.schema}
              Property "wgspring.hbm2ddl.auto" is ${wgspring.hbm2ddl.auto}
        </echo>
    </target>

    <target name="prepare-pgpass">
        <echo>preparing ${app.config.dir}/.pgpass</echo>
        <exec executable="chmod">
            <arg value="0600" />
            <arg value="${app.config.dir}/.pgpass" />
        </exec>
    </target>

    <!-- internal use only: clear a specific schema -->
    <!-- (change-default-schema and clear-schema both call this) -->
    <macrodef name="clear-named-schema">
        <attribute name="schema-name" />
        <sequential>
            <echo>Clearing schema @{schema-name} ${wgspring.db.host}
              using PGPASSFILE=${app.config.dir}/.pgpass,
          dbname ${wgspring.db.dbname}, dbport ${wgspring.db.port},
          and username ${wgspring.migrations.db.username}
            </echo>
            <exec executable="bash" failonerror="true">
                <env key="PGPASSFILE" file="${app.config.dir}/.pgpass"/>
                <arg value="${imported.basedir}/scripts/db/clear_schema.sh" />
                <arg value="${wgspring.migrations.db.username}" />
                <arg value="${wgspring.db.host}" />
                <arg value="${wgspring.db.port}" />
                <arg value="${wgspring.db.dbname}" />
                <arg value="@{schema-name}" />
             </exec>
         </sequential>
    </macrodef>

    <!-- internal use only: run arbitrary SQL on the local server -->
    <!-- We don't fail on error, because pgsql lacks a  -->
    <!-- "create schema if not exists" option -->
    <macrodef name="pg-run">
        <attribute name="sql" />
        <sequential>
            <echo>Running SQL [@{sql}]</echo>
            <exec executable="psql" failonerror="false">
                <arg value="-U" />
                <arg value="postgres" />
                <arg value="-h" />
                <arg value="localhost" />
                <arg value="-p" />
                <arg value="${wgspring.db.port}" />
                <arg value="${wgspring.db.dbname}" />
                <arg value="-c" />
                <arg value="@{sql}" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="pg-run-script">
        <attribute name="script" />
        <sequential>
            <echo>executing script @{script}</echo>
            <exec executable="psql" failonerror="true" >
                <env key="PGPASSFILE" file="${app.config.dir}/.pgpass"/>
                <arg value="-h"/>
                <arg value="${wgspring.db.host}"/>
                <arg value="-p"/>
                <arg value="${wgspring.db.port}"/>
                <arg value="-U"/>
                <arg value="${wgspring.migrations.db.username}"/>
                <arg value="${wgspring.db.dbname}"/>
                <arg value="-f" />
                <arg value="@{script}" />
            </exec>
        </sequential>
    </macrodef>

    <target name="clear-schema" if="wgspring.db.migrate" depends="prepare-pgpass">
        <clear-named-schema schema-name="${wgspring.db.schema}" />
    </target>

    <target name="change-default-schema"
            description="clear old schema and create the new one"
            depends="prepare-pgpass">
        <clear-named-schema schema-name="${wgspring.db.schema.previous}" />
        <pg-run sql="create schema ${wgspring.db.schema}" />
        <pg-run sql="alter user ${wgspring.migrations.db.username} set search_path to ${wgspring.db.schema}" />
    </target>

    <target name="migrate-schema" if="wgspring.db.migrate"
            description="run migrations for current release">
        <exec executable="bash" failonerror="true">
            <arg value="${imported.basedir}/scripts/migrations/liquibase.sh"/>
            <env key="LIQUIBASE_JAR" file="${runtime.lib.dir}/liquibase-core-*.jar"/>
            <env key="LIQUIBASE_CLASSPATH" file="${runtime.lib.dir}/${migration.runtime.jar}"/>
            <env key="LIQUIBASE_MIGRATIONS" file="${app.resources.dir}/migration/liquibase"/>
            <env key="LIQUIBASE_DB_HOST" value="${wgspring.db.host}"/>
            <env key="LIQUIBASE_DB_PORT" value="${wgspring.db.port}"/>
            <env key="LIQUIBASE_DB_NAME" value="${wgspring.db.dbname}"/>
            <env key="LIQUIBASE_DB_USER" value="${wgspring.migrations.db.username}"/>
            <env key="LIQUIBASE_DB_PWORD" value="${wgspring.migrations.db.password}"/>
            <env key="LIQUIBASE_DB_SCHEMA" value="${wgspring.db.schema}"/>
            <arg value="${wgspring.db.migration}"/>
            <arg value="update"/>
        </exec>
        <load-context context="${integration.test.classes.dir}/${servlet.name}-servlet.xml"/>
        
        <!-- make sure this truncate tables function is created, needed for running tests 
        adding here so that it gets created in all test environments.
        Can't be an actual migration because it can't exist in prod and other real environments -->
        <antcall target="create-truncate-tables-function" />
    </target>

    <target name="tag-schema"
            description="tag current schema state as 'previous release'">
        <exec executable="bash" failonerror="true">
            <arg value="${imported.basedir}/scripts/migrations/liquibase.sh"/>
            <env key="LIQUIBASE_JAR" file="${runtime.lib.dir}/liquibase-core-*.jar"/>
            <env key="LIQUIBASE_CLASSPATH" file="${runtime.lib.dir}/${migration.runtime.jar}"/>
            <env key="LIQUIBASE_MIGRATIONS" file="${app.resources.dir}/migration/liquibase"/>
            <env key="LIQUIBASE_DB_HOST" value="${wgspring.db.host}"/>
            <env key="LIQUIBASE_DB_PORT" value="${wgspring.db.port}"/>
            <env key="LIQUIBASE_DB_NAME" value="${wgspring.db.dbname}"/>
            <env key="LIQUIBASE_DB_USER" value="${wgspring.migrations.db.username}"/>
            <env key="LIQUIBASE_DB_PWORD" value="${wgspring.migrations.db.password}"/>
            <env key="LIQUIBASE_DB_SCHEMA" value="${wgspring.db.schema}"/>
            <arg value="${wgspring.db.migration}"/>
            <arg value="tag"/>
            <arg value="${wgspring.db.migration.previous.tag}"/>
        </exec>
    </target>

    <target name="rollback-schema"
            description="run down-migrations for current release" >
        <exec executable="bash" failonerror="true">
            <arg value="${imported.basedir}/scripts/migrations/liquibase.sh"/>
            <env key="LIQUIBASE_JAR" file="${runtime.lib.dir}/liquibase-core-*.jar"/>
            <env key="LIQUIBASE_CLASSPATH" file="${runtime.lib.dir}/${migration.runtime.jar}"/>
            <env key="LIQUIBASE_MIGRATIONS" file="${app.resources.dir}/migration/liquibase"/>
            <env key="LIQUIBASE_DB_HOST" value="${wgspring.db.host}"/>
            <env key="LIQUIBASE_DB_PORT" value="${wgspring.db.port}"/>
            <env key="LIQUIBASE_DB_NAME" value="${wgspring.db.dbname}"/>
            <env key="LIQUIBASE_DB_USER" value="${wgspring.migrations.db.username}"/>
            <env key="LIQUIBASE_DB_PWORD" value="${wgspring.migrations.db.password}"/>
            <env key="LIQUIBASE_DB_SCHEMA" value="${wgspring.db.schema}"/>
            <arg value="${wgspring.db.migration}"/>
            <arg value="rollback"/>
            <arg value="${wgspring.db.migration.previous.tag}"/>
        </exec>
    </target>
    
    <target name="update-schema" depends="clear-schema, load-snapshot, repair-migration-filenames, migrate-schema" 
        description="Clear and update the schema"/>
    
    <target name="load-fixtures" depends="update-schema,fixture-run-all-datamakers" description="Load fixtures"/>

    <target name="prepare-db-for-parallel-tests"
            depends="load-fixtures-snapshot, repair-migration-filenames, tag-schema, migrate-schema"
            description="Run on testdogs by parallelTests.py to get them prepared for integration testing; overridden in projects that don't use snapshots" />

    <target name="fixture-run-all-datamakers" description="Run all fixture Datamakers">
       <mkdir dir="${fixture.export.dir}"/>
       <spring-runner context="${context.integration.dir}/fixture-runner-load-datamakers-context.xml"
            bean="fixtureRunnerLoadDatamakers"
            method="runAllDatamakers">
            <arg value="${fixture.export.dir}"/>
       </spring-runner>
    </target>
    
    <target name="run-dm" depends="test-compile" description="Run one fixture datamaker, use with -Ddm=DataMakerClassName">
       <spring-runner context="${context.integration.dir}/fixture-runner-load-datamakers-context.xml"
           bean="fixtureRunnerLoadDatamakers"
           method="runSomeDatamakers">
         <arg value="${dm}" />
       </spring-runner>
    </target>

    <target name="run-fixture-exporters" depends="test-compile" description="Run just the fixture exporters.">
       <mkdir dir="${fixture.export.dir}"/>
       <spring-runner context="${context.integration.dir}/fixture-runner-load-datamakers-context.xml"
           bean="fixtureRunnerLoadDatamakers"
           method="exportAllData">
         <arg value="${fixture.export.dir}"/>
       </spring-runner>
    </target>

    <target name="run-some-exporters" depends="test-compile"
        description="Run fewer than all exporters, use with -Dexporter=FixtureExporterClassName">
       <mkdir dir="${fixture.export.dir}"/>
       <spring-runner context="${context.integration.dir}/fixture-runner-load-datamakers-context.xml"
           bean="fixtureRunnerLoadDatamakers"
           method="exportSomeData">
           <arg value="${fixture.export.dir}"/>
           <arg value="${exporter}" />
       </spring-runner>
    </target>

    <target name="run-napi-fixture-exporters" depends="test-compile" description="Run just the napi fixture exporters.">
       <mkdir dir="${napi.fixture.export.dir}"/>
       <spring-runner context="${context.integration.dir}/fixture-runner-load-datamakers-context.xml"
           bean="fixtureRunnerLoadDatamakers"
           method="runNAPIDatamakers">
         <arg value="${napi.fixture.export.dir}"/>
       </spring-runner>
    </target>
    
    <target name="load-fixtures-snapshot" description="Load fixtures snapshot">
        <exec executable="/bin/bash" failonerror="true">
            <arg value="./conf/base/scripts/build/check_for_postgres_user_in_db_snap.sh" />
            <arg value="${sql.fixtures}" />
        </exec>
        <antcall target="clear-schema"/>
        <antcall target="load-snapshot-provided">
            <param name="snapshot" value="${sql.fixtures}"/>
        </antcall>
    </target>
    
    <target name="load-snapshot" description="Load March 2010 snapshot">
        <echo>${sql.snapshot}</echo>
        <echo>checking for "postgres" in snapshot, should be "tt_manage" instead</echo>
        <exec executable="/bin/bash" failonerror="true">
            <arg value="./conf/base/scripts/build/check_for_postgres_user_in_db_snap.sh" />
            <arg value="${sql.snapshot}" />
        </exec>
        <antcall target="load-snapshot-provided">
            <param name="snapshot" value="${sql.snapshot}"/>
        </antcall>
    </target>

    <target name="load-baseline-database"
            description="Load, repair, and tag previous-release snapshot"
            depends="load-snapshot,repair-migration-filenames,tag-schema"
    />
    
    <target name="load-snapshot-provided" depends="prepare-pgpass">
        <if>
            <not>
                <available file="${snapshot}" />
            </not>
            <then>
                <fail>Could not find snapshot ${snapshot}</fail>
            </then>
        </if>
        <exec executable="psql" 
            failonerror="true" 
            input="${snapshot}">
            <env key="PGPASSFILE" file="${app.config.dir}/.pgpass"/>
            <arg value="-h"/>
            <arg value="${wgspring.db.host}"/>
	    <arg value="-p"/>
            <arg value="${wgspring.db.port}"/>
            <arg value="-U"/>
            <arg value="${wgspring.migrations.db.username}"/>
            <arg value="${wgspring.db.dbname}"/>
        </exec>
    </target>
    
    <target name="create-truncate-tables-function" depends="prepare-pgpass"
        description="create a pg function that truncates most tables - used by integration tests">
        <pg-run-script script="${app.dir}/scripts/db/create_truncate_tables_function.sql" />
    </target>
    
    <target name="repair-migration-filenames" depends="prepare-pgpass">
        <property name="migration.dir" location="${app.resources.dir}/migration/liquibase"/>
        <exec executable="bash" failonerror="true">
            <env key="PGPASSFILE" file="${app.config.dir}/.pgpass"/>
            <arg value="${app.dir}/scripts/db/repair_migration_filenames.sh"/>
            <arg value="${migration.dir}"/>
            <arg value="${wgspring.migrations.db.username}"/>
            <arg value="${wgspring.db.dbname}"/>
            <arg value="${wgspring.db.host}"/>
            <arg value="${wgspring.db.port}"/>
        </exec>
    </target>

    <target name="fixtures-rebuild-db-snapshot"
            description="Load fixtures and create a new fixtures snapshot"
            depends="update-schema">
        <mkdir dir="${fixture.export.dir}"/>
        <exec executable="bash" failonerror="true">
            <arg value="${app.dir}/scripts/test/load_fixtures_and_take_snapshot.sh"/>
        </exec>
    </target>

    <target name="liquibase"
            description="Execute arbitrary liquibase command (e.g. -Dcmd='rollbackCount 1') on the database">
        <exec executable="bash" failonerror="true">
            <arg value="${imported.basedir}/scripts/migrations/liquibase.sh"/>
            <env key="LIQUIBASE_JAR" file="${runtime.lib.dir}/liquibase-core-*.jar"/>
            <env key="LIQUIBASE_CLASSPATH" file="${runtime.lib.dir}/${migration.runtime.jar}"/>
            <env key="LIQUIBASE_MIGRATIONS" file="${app.resources.dir}/migration/liquibase"/>
            <env key="LIQUIBASE_DB_HOST" value="${wgspring.db.host}"/>
            <env key="LIQUIBASE_DB_PORT" value="${wgspring.db.port}"/>
            <env key="LIQUIBASE_DB_NAME" value="${wgspring.db.dbname}"/>
            <env key="LIQUIBASE_DB_USER" value="${wgspring.migrations.db.username}"/>
            <env key="LIQUIBASE_DB_PWORD" value="${wgspring.migrations.db.password}"/>
            <env key="LIQUIBASE_DB_SCHEMA" value="${wgspring.db.schema}"/>
            <arg value="${wgspring.db.migration}"/>
            <arg value="${cmd}"/>
        </exec>
    </target>

    <target name="change-migration-filenames-to-opt-tt" depends="prepare-pgpass">
        <property name="migration.dir" location="/opt/tt/migrations/migrations"/>
        <exec executable="bash" failonerror="true">
              <env key="PGPASSFILE" file="${app.config.dir}/.pgpass"/>
              <arg value="${app.dir}/scripts/db/repair_migration_filenames.sh"/>
              <arg value="${migration.dir}"/>
              <arg value="${wgspring.migrations.db.username}"/>
              <arg value="${wgspring.db.dbname}"/>
              <arg value="${wgspring.db.host}"/>
              <arg value="${wgspring.db.port}"/>
        </exec>
    </target>

</project>
