<project name="jar">
    <macrodef name="javac-standard">
        <attribute name="srcdir" />
        <attribute name="destdir" />
        <element name="javac-nested" implicit="true" optional="true" />
        <sequential>
            <javac
                srcdir="@{srcdir}"
                destdir="@{destdir}"
                deprecation="${build.deprecation}"
                debug="on"
                optimize="${build.optimization}"
                compiler="${build.compiler}"
                executable="${build.executable}"
                source="${build.source}"
                sourcepath=""
                target="${build.target}"
                encoding="UTF-8"
                includeantruntime="no"
            >
                <javac-nested />
            </javac>
        </sequential>
    </macrodef>
    <macrodef name="javac-strict">
        <attribute name="srcdir" />
        <attribute name="destdir" />
        <element name="javac-nested" implicit="true" optional="true" />
        <sequential>
            <javac-standard srcdir="@{srcdir}" destdir="@{destdir}">
                <javac-nested />
                <compilerarg value="-Xlint" />
                <compilerarg value="-Xlint:-path" />
                <compilerarg value="-Werror" />
            </javac-standard>
        </sequential>
    </macrodef>

    <macrodef name="javac-conditional">
        <attribute name="srcdir" />
        <attribute name="destdir" />
        <attribute name="strict" />
        <element name="javac-nested" implicit="true" optional="true" />
        <sequential>
            <if>
                <istrue value="@{strict}" />
                <then>
                    <javac-strict srcdir="@{srcdir}" destdir="@{destdir}">
                        <javac-nested />
                    </javac-strict>
                </then>
                <else>
                    <javac-standard srcdir="@{srcdir}" destdir="@{destdir}">
                        <javac-nested />
                    </javac-standard>
                </else>
            </if>
        </sequential>
    </macrodef>

    <path id="build.app.classpath">
        <fileset dir="${compile.lib.dir}" includes="**/*.jar"/>
        <fileset dir="${jar.outdir}">
            <include name="${jar.common.app.name}.jar"/>
            <include name="${jar.common.web.name}.jar"/>
        </fileset>
    </path>
        
    <target name="build-test-jars" description="implemented only by wgspringcore" />

    <target name="build-app-jars" 
                description="Compile the source into jars" depends="unzip-web-assets, sass-compile">

        <if>
            <isset property="${cobertura-instrument-app-jars}" />
        <then>
            <antcall target="-cobertura-setup" />
        </then>
        </if>

        <mkdir dir="${jar.classes.dir.main}/app"/>
        <mkdir dir="${jar.classes.dir.main}/web"/>

        <!-- compile source into the output directory -->
        <javac-conditional
                    srcdir="${app.src.dir}"
                    destdir="${jar.classes.dir.main}/app"
                    strict="${build.no-warnings}"
        >
                <classpath refid="build.app.classpath"/>
        </javac-conditional>
        
        <!-- copy .properties files into the output directory -->
        <copy todir="${jar.classes.dir.main}/app">
            <fileset dir="${app.src.dir}">
                <include name="**/*.properties" />
            </fileset>
        </copy>
        
        <jar
            basedir="${jar.classes.dir.main}/app"
            destfile="${jar.outdir}/${jar.app.name}.jar"
            excludes="**/ui/**/*.class"
            update="false"
        />
        <jar
            basedir="${app.src.dir}"
            destfile="${jar.outdir}/${jar.app.name}-src.jar"
            excludes="**/ui/**/*.java"
            update="false"
        />

         <path id="build.web.classpath">
             <path refid="build.app.classpath"/>
             <fileset dir="${jar.outdir}" includes="${jar.app.name}.jar"/>
         </path>
         <javac-conditional
                    srcdir="${app.src.dir}"
                    destdir="${jar.classes.dir.main}/web"
                    strict="${build.no-warnings}"
         >
                <classpath refid="build.web.classpath"/>
                <include name="**/ui/**/*.java"/>
         </javac-conditional>
        <!-- Copy context and freemarker resources into the web build path -->
        <copy todir="${jar.classes.dir.main}/web">
            <fileset dir="${app.src.dir}" includes="${app.src.build.resources.pattern}" />
        </copy>
        
        <jar
            basedir="${jar.classes.dir.main}/web"
            destfile="${jar.outdir}/${jar.web.name}.jar"
            update="false"
        />

        <jar
            basedir="${app.src.dir}"
            destfile="${jar.outdir}/${jar.web.name}-src.jar"
            update="false"
        />

        <if>
            <isset property="${cobertura-instrument-app-jars}" />
        <then>
            <antcall target="cobertura-instrument-jars" />
        </then>
        </if>

     </target>
     
    <target name="build-javadoc" description="Generate JavaDoc for the source">
        <javadoc destdir="${output.dir}/javadoc" classpathref="build.app.classpath">
            <sourcefiles>
                <fileset dir="${app.src.dir}" />
                <fileset dir="${app.integration.src.dir}/util/java">
                    <include name="**/*DM.java" />
                </fileset>
            </sourcefiles>
        </javadoc>
    </target>
</project>
