<?xml version="1.0"?>
<project name="test">
    <property file="${imported.basedir}/default.test.properties" />

    <!-- if the "method" property is not set, initialize to empty -->
    <!-- (if we don't, junit-explicit will see the value '${method} for that parameter, breaking util tests) -->
    <property name="method" value="" />

    <property name="debug" value="false"/>

    <taskdef resource="checkstyletask.properties">
        <classpath>
            <pathelement location="${build.lib.dir}/freestyle-1.0.0.jar" />
            <pathelement location="${build.lib.dir}/checkstyle-all-${external-dependencies.checkstyle.revision}.jar" />
        </classpath>
    </taskdef>

    <!-- COBERTURA-RELATED DEFINITIONS -->
    <if>
        <!-- if the coverage lib dir is defined, we assume it has something in it-->
        <available file="${coverage.lib.dir}" type="dir" />
        <!-- so go ahead and attempt cobertura task definitions -->
        <then>
            <path id="cobertura.classpath">
                <fileset dir="${coverage.lib.dir}" />
                <fileset dir="${test.lib.dir}" includes="*.jar" />
            </path>
            <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
        </then>
        <!-- otherwise, warn that it isn't there, and fail if coverage reports were requested -->
        <else>
            <echo>WARNING: no coverage library directory found at '${coverage.lib.dir}'</echo>
            <!-- define an empty path with the same ID for test.classpath.*, and set property to check later -->
            <property name="build.coverage.lib.missing" value="true" />
            <path id="cobertura.classpath" />
        </else>
    </if>

    <!-- these imports aren't necessary but eclipse displays errors if they're not here-->
    <import file="deployTargets.xml"/>
    <import file="dbTargets.xml"/>
    <import file="serverTargets.xml"/>
    <import file="ivyTargets.xml"/>

    <property name="jar-test.include" value="wgspring*integration*-test-*.jar" />
    <property name="jar-test.exclude" value="*-src-*.jar"/>

    <path id="test.classpath.base">
        <path refid="cobertura.classpath" />
        <fileset dir="${test.lib.dir}" includes="*.jar" />
        <fileset dir="${tested.classes.dir}" includes="**/*.jar" erroronmissingdir="false" />
        <pathelement location="${unit.test.classes.dir}" />
    </path>
    <path id="test.classpath.run-base">
        <path refid="test.classpath.base" />
        <pathelement location="${test.resources.dir}" />
        <pathelement location="${app.resources.dir}" />
    </path>
    <path id="test.classpath.run-integration">
        <path refid="test.classpath.run-base" />
        <pathelement location="${test.src.dir}" />
        <pathelement location="${webdriver.test.classes.dir}" />
        <pathelement location="${integration.test.classes.dir}" />
        <pathelement location="${webservice.test.classes.dir}" />
    </path>

    <target name="test-quick" description="Run embarassing-to-fail tests" depends="quicktests"/>
    <target name="test-frontend" description="Run all tests for front-end code"
            depends="jslint,template-lint,freestyle" />

    <target
        name="quicktests"
        depends="test-compile,test-frontend,checkstyle,test-unit"
    />

    <target name="alltests">
        <trycatch>
            <try>
                <antcall target="alltests-run"/>
            </try>
            <finally>
                <antcall target="tomcat-stop"/>
                <antcall target="apache-stop"/>
                <antcall target="apache-start"/>
            </finally>
        </trycatch>
    </target>

    <target name="test-all" description="all tests" depends="alltests"/>
        
    <target name="alltests-run" 
        depends="ivy-clean-deploy-steps,
        checkstyle, template-lint, jslint,
        test-unit,
        clear-schema, load-baseline-database, migrate-schema,
        test-integration, test-webservice,
        rollback-schema,
        load-fixtures-snapshot,
        apache-stop, tomcat-start, apache-start, 
        test-webdriver"/>

    <target name="test-clean">
        <delete dir="${test.classes.dir}" />
        <delete dir="${webdriver.test.classes.dir}" />
        <delete dir="${unit.test.classes.dir}" />
        <delete dir="${integration.test.classes.dir}" />
        <delete dir="${webservice.test.classes.dir}"/>
        <delete dir="${results.dir}" />
        <delete dir="${reports.dir}" />
    </target>

    <target name="check-for-tests-junit-wont-find">
        <echo>checking for tests junit won't find because they don't follow the *Test.java naming convention</echo>
        <exec executable="sh" resultproperty="grep.result" failonerror="false">
            <arg line="-c" />
            <arg value="grep -r @Test src --include=*.java --exclude=*Test.java --exclude=*TestAbstract.java" />
        </exec>
        <if><!-- if the grep found something, it returns 0 (success), which means we should fail -->
            <equals arg1="0" arg2="${grep.result}" />
            <then><fail/></then>
        </if>
        <echo>checking for tests junit won't run because their names are not unique</echo>
        <exec executable="sh" outputproperty="find.output">
            <arg line="-c" />
            <arg value="(find ivy_lib/compile -name *wgspringcore*integration*jar -exec jar -tf \{} \; ; find target/test)|grep Test.class|xargs -I PATH basename PATH .class|sort|uniq -d" />
        </exec>
        <if>
            <length when="greater" string="${find.output}" trim="true" length="0" />
            <then>
                <fail message="Found non-unique test name(s): ${find.output}" />
            </then>
        </if>
    </target>

    <!-- set up test directories and compile test classes,  but don't copy
         resources into them.
    -->
    <target name="test-javac" depends="test-clean">
        <mkdir dir="${test.classes.dir}" />
        <mkdir dir="${unit.test.classes.dir}" />
        <mkdir dir="${integration.test.classes.dir}" />
        <mkdir dir="${webservice.test.classes.dir}"/>
        <mkdir dir="${webdriver.test.classes.dir}" />
        <mkdir dir="${results.dir}" />

        <path id="test.classpath.compile">
            <path refid="test.classpath.base" />
            <pathelement location="${integration.test.classes.dir}" />
            <pathelement location="${webservice.test.classes.dir}"/>
            <pathelement location="${webdriver.test.classes.dir}" />
<!-- TODO put libs in ivy and reference from ivy_lib... get rid of below -->
            <fileset dir="${test.lib.dir}" includes="**/*.jar"/>
            <fileset dir="${jar.outdir}" erroronmissingdir="false">
                <include name="${jar.common.app.name}-${rpm.version}.jar"/>
                <include name="${jar.common.web.name}-${rpm.version}.jar"/>
            </fileset>
        </path>

        <macrodef name="javac-test">
            <attribute name="srcdir" />
            <attribute name="destdir" />
            <element name="javac-nested" implicit="true" optional="true"/>
            <sequential>
                <if>
                    <available file="@{srcdir}" />
                    <then>
                        <javac
                            srcdir="@{srcdir}"
                            destdir="@{destdir}"
                            excludes="${test.src.exclude}"
                            classpathref="test.classpath.compile"
                            deprecation="${build.deprecation}"
                            debug="on"
                            optimize="${build.optimization}"
                            compiler="${build.compiler}"
                            source="${build.source}"
                            target="${build.target}"
                            encoding="UTF-8"
                            includeantruntime="no"
                           >
                            <javac-nested />
                        </javac>
                    </then>
                </if>
            </sequential>
        </macrodef>

        <!-- Compile the app unit tests -->
        <javac-test srcdir="${app.unit.src.dir}" destdir="${unit.test.classes.dir}" />

        <!-- Compile the app integration tests -->
        <javac-test  srcdir="${app.integration.src.dir}" destdir="${integration.test.classes.dir}" />

        <!-- Compile the app webservice tests -->
        <javac-test srcdir="${app.webservice.src.dir}" destdir="${webservice.test.classes.dir}"  />

        <!-- Compile the app webdriver tests -->
        <javac-test  srcdir="${app.webdriver.src.dir}" destdir="${webdriver.test.classes.dir}" />

    </target>

    <!-- Compile junit test classes -->
    <target name="test-compile" depends="-cobertura-setup, test-clean, build-app-jars, unzip-web-assets, cobertura-instrument-jars, test-javac"
        description="Compile the tests">


        <!-- copy some static files from the class path in the test directory; skylight runs some tests that need to do this -->
        <copy todir="${unit.test.classes.dir}">
            <fileset dir="${app.unit.src.dir}" includes="**/*.js,**/*.json,**/*.properties,**/*.xml" erroronmissingdir="false" />
        </copy>

        <!-- Copy spring context to integration test dir -->
        <copy todir="${integration.test.classes.dir}" encoding="UTF-8">
            <fileset dir="${app.context.src.dir}" includes="*-context.xml,*-servlet.xml,spring.xml,*ehcache.xml"  erroronmissingdir="false" />
            <filterset begintoken="&quot;" endtoken="&quot;">
                <filter token="ui-context.xml" value="&quot;test-ui-context.xml&quot;"/>
            </filterset>
        </copy>
        <!-- copy test-specific spring context (no filtering games need be played) -->
        <copy todir="${integration.test.classes.dir}" encoding="UTF-8">
            <fileset dir="${context.integration.dir}" includes="*-context.xml,*.properties" erroronmissingdir="false"/>
            <fileset dir="${context.webdriver.dir}" includes="*-context.xml,*.properties" erroronmissingdir="false"/>
        </copy>
        <!-- Copy freemarker templates to integration test dir, for tests that use FreeMarkerMerger -->
        <copy todir="${integration.test.classes.dir}/freemarker" encoding="UTF-8">
            <fileset erroronmissingdir="false" dir="${app.freemarker.dir}" includes="**/*.ftl"/>
        </copy>

        <antcall target="check-for-tests-junit-wont-find" />

    </target>

    <target name="build-test-util-javadoc"
            description="Generate JavaDoc for datamakers and webdriver pages"
            if="beacon.publish.test.webdriver">
        <javadoc destdir="${output.dir}/test-util-javadoc" classpathref="test.classpath.run-integration">
            <sourcefiles>
                <fileset dir="${app.webdriver.src.dir}"  includes="**/pages/**/*.java,**/util/**/*.java" />
                <fileset dir="${app.integration.src.dir}/util/java" includes="**/*DM.java" />
            </sourcefiles>
        </javadoc>
    </target>

    <macrodef name="junit-explicit">
        <attribute name="label" />
        <attribute name="classpathref" />
        <attribute name="coverage-file" default="${coverage.data.file.ignored}" />
        <attribute name="disable-cache" default="false" />
        <attribute name="method" default="" />
        <attribute name="run-only-util-param" default="false" />
        <element name="junit-filesets" implicit="true" optional="false" />
        <sequential>
            <if>
                <available file="${coverage.data.file.base}" />
                <!-- copy base coverage file, overwriting previous version for this test -->
                <!-- but don't make a fuss if it's not there to copy -->
                <then>
                    <copy
                        file="${coverage.data.file.base}"
                        tofile="@{coverage-file}"
                        overwrite="true"
                    />
                </then>
            </if>

            <property environment="env" />
            <condition property="remoteDebugJvmArgs"
                value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=${tomcat.jpda.address}"
                else="-ea">
                <istrue value="${debug}"/>
            </condition>
            <!-- first, use the parameter value if true -->
            <condition property="run-only-util" value="true">
                <istrue value="@{run-only-util-param}" />
            </condition>
            <!-- second, try the value from the environment -->
            <condition property="run-only-util" value="${env.RUN_ONLY_UTIL}">
                <isset property="env.RUN_ONLY_UTIL" />
            </condition>
            <!-- default to nothing -->
            <property name="run-only-util" value="" />
            <!--<echo>run-only-util-param  @{run-only-util-param}</echo>
            <echo>env.RUN_ONLY_UTIL ${env.RUN_ONLY_UTIL}</echo>
            <echo>run-only-util  ${run-only-util}</echo>-->

            <junit
                fork="yes"
                forkmode="perBatch"
                haltonfailure="false"
                haltonerror="false"
                printsummary="yes"
                showoutput="yes"
                failureproperty="junit.failed"
                maxmemory="768m"
                >
                <sysproperty key="${common.config.dir.property}" value="${common.config.dir}" />
                <sysproperty key="${app.config.dir.property}" value="${app.config.dir}"/>
                <sysproperty key="app.freemarker.source.dir" file="${app.freemarker.dir}" />
                <!-- The specific test method to run -->
                <sysproperty key="net.wgen.spring.common.test.method" value="${method}" />
                <sysproperty key="RUN_ONLY_UTIL" value="${run-only-util}" /> <!-- reset the env variable -->
                <!--Disable EhCache for batch testing! -->
                <sysproperty key="net.sf.ehcache.disabled" value="@{disable-cache}" />
                <sysproperty key="spring.profiles.active" value="${spring.profiles.junit}" />
                <formatter type="brief" />
                <formatter type="xml" />

                <classpath refid="@{classpathref}" />
                <sysproperty key="net.sourceforge.cobertura.datafile" file="@{coverage-file}" />
                <jvmarg value="${remoteDebugJvmArgs}"/>
                <jvmarg value="-Xmx768m" />
            	<jvmarg value="-Dfile.encoding=utf8" />
            	<jvmarg value="-XX:MaxPermSize=256m" />
            	<jvmarg value="-XX:-UseGCOverheadLimit" />
                <!-- these are almost certainly useless, but harmless (we don't expect the JVM to hang around long enough to need them) -->
            	<jvmarg value="-XX:+CMSClassUnloadingEnabled" />
                <jvmarg value="-XX:+UseConcMarkSweepGC" />
                <!--<jvmarg value="${test.vm.args}" />-->
                <batchtest todir="${results.dir}">
                    <junit-filesets />
                </batchtest>

            </junit>
            <if>
                <istrue value="${junit.failed}" />
                <then>
                    <concat>
                        <header filtering="no" trimleading="yes">
                              TEST FAILURES
                              =============
                        </header>
                        <fileset dir="${results.dir}" includes="TEST-*.txt" />
                        <filterchain>
                            <linecontainsregexp>
                                <regexp pattern="Testcase.*(ERROR|FAILED)" />
                            </linecontainsregexp>
                        </filterchain>
                    </concat>
                   <fail message="@{label} failed" />
               </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="junit-standard">
        <attribute name="label" />
        <attribute name="classpathref" />
        <attribute name="testdir" />
        <attribute name="coverage-file" />
        <attribute name="disable-cache" default="false"/>
        <sequential>
            <junit-explicit 
                label="@{label}" classpathref="@{classpathref}" coverage-file="@{coverage-file}" disable-cache="@{disable-cache}" >
                <fileset
                        dir="@{testdir}"
                        includes="${tests.include}"
                        excludes="${tests.exclude}"
                />
            </junit-explicit>
        </sequential>
    </macrodef>

    <target name="test-one" depends="one" description="run one test (see target 'one')"/>

    <target name="one" depends="test-compile" 
        description="Run a single test: use with -Dtest=NameOfTest and optionally -Dmethod=methodOfTestToRun and run with -Ddebug=true to remote debug">
        <junit-explicit label="Cherry-picked tests" classpathref="test.classpath.run-integration"
		disable-cache="false" method="${method}">
            <fileset dir="${unit.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${integration.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${webservice.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${webdriver.test.classes.dir}" includes="**/${test}.class" />
        </junit-explicit>
    </target>

    <target name="test-util"  depends="test-compile"
        description="run a single utility: use with -Dtest=NameOfTest and optionally -Dmethod=methodOfTestToRun">
        <junit-explicit label="Cherry-picked tests" classpathref="test.classpath.run-integration"
            disable-cache="false" method="${method}" run-only-util-param="true">
            <fileset dir="${unit.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${integration.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${webservice.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${webdriver.test.classes.dir}" includes="**/${test}.class" />
        </junit-explicit>
    </target>

    <target name="test-one-precompiled"
        description="Run a single test that's already compiled: use with -Dtest=NameOfTest">
        <pathconvert property="jar-containing-tests" targetos="unix" pathsep="">
            <fileset dir="${ivy.lib.dir}/test"
                includes="wgspringcore-integration-test-*.jar"
                excludes="wgspringcore-integration-test-src-*.jar"/>
        </pathconvert>
        <junit-explicit label="Cherry-picked tests" classpathref="test.classpath.run-integration"
                        disable-cache="false">
            <fileset dir="${unit.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${integration.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${webservice.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${webdriver.test.classes.dir}" includes="**/${test}.class" />
            <zipfileset src="${jar-containing-tests}"
                        includes="**/${test}.class" />
        </junit-explicit>
    </target>

    <target name="test-several-precompiled"
        description="Run several tests that are already compiled: use with -Dtests=[comma-separated list of patterns to match]">
        <pathconvert property="jar-containing-tests" targetos="unix" pathsep="">
            <fileset dir="${ivy.lib.dir}/test"
                includes="wgspringcore-integration-test-*.jar"
                excludes="wgspringcore-integration-test-src-*.jar"/>
        </pathconvert>
        <junit-explicit label="Cherry-picked tests" classpathref="test.classpath.run-integration" disable-cache="false">
            <fileset dir="${unit.test.classes.dir}" includes="${tests}" />
            <fileset dir="${integration.test.classes.dir}" includes="${tests}" />
            <fileset dir="${webservice.test.classes.dir}" includes="${tests}" />
            <fileset dir="${webdriver.test.classes.dir}" includes="${tests}" />
            <zipfileset src="${jar-containing-tests}" includes="${tests}" />
        </junit-explicit>
    </target>

    <target name="test-webdriver" depends="clean, test-compile"
        description="Run all webdriver tests">
        <!-- PLEASE NOTE THIS COVERAGE FILE DOES NOT FOLLOW THE PATTERN -->
        <junit-standard
            label="Webdriver tests"
            classpathref="test.classpath.run-integration"
            testdir="${webdriver.test.classes.dir}"
            coverage-file="${coverage.data.file.ignored}"
        />
    </target>

    <target name="test-webdriver-precompiled" description="Run all webdriver tests without compiling them; meant for running the tests on a remote host">
        <!-- PLEASE NOTE THIS COVERAGE FILE DOES NOT FOLLOW THE PATTERN -->
        <junit-standard
            label="Webdriver tests"
            classpathref="test.classpath.run-integration"
            testdir="${webdriver.test.classes.dir}"
            coverage-file="${coverage.data.file.ignored}"
        />
    </target>

    <target name="test-slow" depends="test-compile" 
        description="Run all tests with the @Slow annotation">

        <!--set slow tests to run in the properties file-->
        <property name="run.slow.smoke.tests" value="true" file="${app.config.dir}/${servlet.name}.properties" />

        <antcall target="test-webdriver" />

        <!--unset slow tests to run in the properties file-->
        <property name="run.slow.smoke.tests" value="false" file="${app.config.dir}/${servlet.name}.properties" />

     </target>
    
    <target name="test-webservice" depends="test-compile" 
            description="Run all webservice tests">
        <junit-standard
            label="Webservice tests"
            testdir="${webservice.test.classes.dir}"
            classpathref="test.classpath.run-integration"
            coverage-file="${coverage.data.file.test-webservice}"
            disable-cache="false"
        />
    </target>

    <target name="test-integration" depends="test-compile, test-integration-wgspringcore" 
        description="Run all integration tests">
        <property name="run.nonslow.tests" value="false" file="${app.config.dir}/${servlet.name}.properties" />
        <junit-standard
            label="Integration tests"
            testdir="${integration.test.classes.dir}"
            classpathref="test.classpath.run-integration"
            coverage-file="${coverage.data.file.test-integration}"
            disable-cache="false"
        />
    </target>
    
    <target name="test-integration-wgspringcore" description="Run tests found in wgspringcore-integration-test-*.jar"
        depends="test-compile" >
        <for param="this-jar" keepgoing="true">
            <fileset dir="${ivy.lib.dir}/test" includes="${jar-test.include}" excludes="${jar-test.exclude}"/>
            <sequential>
                <echo>running tests in @{this-jar}</echo>
                <junit-explicit
                    label="wgspringcore integration tests"
                    classpathref="test.classpath.run-integration"
                    coverage-file="${coverage.data.file.test-integration}"
                    disable-cache="false" >
                    <zipfileset src="@{this-jar}"
                                includes="${tests.include}"
                                excludes="${tests.exclude}" />
                </junit-explicit>
            </sequential>
        </for>
    </target>

    <target name="test-unit" depends="test-compile"
        description="Run all unit tests">
        <junit-standard
            label="Unit tests"
            classpathref="test.classpath.run-base"
            testdir="${unit.test.classes.dir}"
            coverage-file="${coverage.data.file.test-unit}"
        />
    </target>

    <target name="-cobertura-setup" if="build.cobertura">
        <fail if="build.coverage.lib.missing">FATAL: test coverage requested but lib dir is missing</fail>
        <mkdir dir="${coverage.data.dir}" />
    </target>

    <target name="cobertura-instrument-jars" if="build.cobertura" depends="-cobertura-setup">
        <if>
            <not>
                <uptodate targetfile="${coverage.data.file.base}">
                    <srcfiles dir="${jar.outdir}" includes="*.jar" />
                </uptodate>
            </not>
            <then>
                <cobertura-instrument datafile="${coverage.data.file.base}">
                    <includeClasses regex=".*" />
                    <excludeClasses regex=".*\bURL(Prefix|Param)" />
                    <excludeClasses regex=".*\bModel(Keys|Attr)" />
                    <excludeClasses regex=".*\bJSONKey(s?)" />
                    <excludeClasses regex=".*\bTemplates" />
                    <instrumentationClasspath>
                        <fileset dir="${jar.outdir}" includes="*.jar" />
                    </instrumentationClasspath>
                </cobertura-instrument>
            </then>
        </if>
    </target>

    <target name="-cobertura-merge">
        <!-- we could try to get fancy and use a "depend" filter on the fileset below -->
        <!-- or we could just re-do the merge every time.  Seems simpler this way -->
        <delete file="${coverage.data.file.combined}" />
        <cobertura-merge datafile="${coverage.data.file.combined}">
            <fileset dir="${coverage.data.dir}">
                <include name="*.ser" />
                <exclude name="${coverage.data.file.ignored}" />
            </fileset>
        </cobertura-merge>
    </target>

    <!-- turn a supplied cobertura data file into a human-readable report -->
    <macrodef name="cobertura-html-report">
        <attribute name="datafile" />
        <attribute name="report-subdir" />
        <sequential>
            <mkdir dir="${coverage.reports.dir}/@{report-subdir}" />
            <cobertura-report
                format="html"
                datafile="@{datafile}"
                destdir="${coverage.reports.dir}/@{report-subdir}"
            >
                <fileset dir="${app.src.dir}" />
            </cobertura-report>
        </sequential>
    </macrodef>

    <!-- shortcut to generate an HTML report for a specific test suite -->
    <macrodef name="cobertura-test-suite-report">
        <attribute name="subreport-tag" />
        <sequential>
            <cobertura-html-report
                datafile="${coverage.data.file.test-@{subreport-tag}}"
                report-subdir="@{subreport-tag}"
            />
        </sequential>
    </macrodef>

    <target name="cobertura-report-unit"
             description="Human-readable coverate report for unit tests">
        <cobertura-test-suite-report subreport-tag="unit" />
    </target>

    <target name="cobertura-report-integration"
             description="Human-readable coverate report for integration tests">
        <cobertura-test-suite-report subreport-tag="integration" />
    </target>

    <target name="cobertura-report-webservice"
             description="Human-readable coverate report for webservice tests">
            <cobertura-test-suite-report subreport-tag="webservice" />
    </target>

    <target name="cobertura-report-all"
        depends="cobertura-report,
             cobertura-report-unit,cobertura-report-integration,cobertura-report-webservice"
        description="Create reports for each sub-category of tests."
    />

    <target name="cobertura-report" depends="-cobertura-merge"
        description="Create a human-readable test coverage report combining all test suites"
        >
        <cobertura-html-report datafile="${coverage.data.file.combined}" report-subdir="" />
    </target>

    <target name="cobertura-report-xml" depends="-cobertura-merge"
        description="Create a machine-readable test coverage report"
        >
        <mkdir dir="${coverage.reports.dir}" />
        <cobertura-report
            format="xml"
            datafile="${coverage.data.file.combined}"
            destdir="${coverage.reports.dir}"
            >
            <fileset dir="${app.src.dir}" />
        </cobertura-report>
    </target>

    <target name="cobertura-dump-webapp">
        <fail message="dump request failed">
            <condition>
                <not>
                    <http
                     url="http://localhost:8080/${servlet.name}/liveops/webservices/cobertura/dump"
                     />
                </not>
            </condition>
        </fail>
    </target>

    <target name="checkstyle" description="Run checkstyle" unless="skip.checkstyle">
        <mkdir dir="${results.dir}"/>

        <checkstyle config="${imported.basedir}/checkstyle.xml" failonviolation="true">
            <fileset dir="${app.src.dir}" includes="**/*.java" />
            <fileset dir="${app.unit.src.dir}" includes="**/*.java" />
            <fileset dir="${app.integration.src.dir}" includes="**/*.java" />
            <fileset dir="${app.webservice.src.dir}" includes="**/*.java" />
            <fileset dir="${app.webdriver.src.dir}" includes="**/*.java" />  
            <formatter type="xml" toFile="${results.dir}/checkstyle-errors.xml" />
            <formatter type="plain" usefile="false" />
        </checkstyle>
        <fail if="checkstyle.failed" message="Checkstyle failed" />
    </target>

    <target name="freestyle" description="Run freemarker checkstyle">
        <mkdir dir="${results.dir}"/>
        
        <checkstyle config="${imported.basedir}/flint.xml" failonviolation="true">
            <fileset dir="${app.freemarker.dir}" includes="**/*.ftl" />
            <formatter type="plain" usefile="false" />
        </checkstyle>
        <fail if="checkstyle.failed" message="Checkstyle failed" />
    </target>

    <target name="checkstyleWithLayeringViolations"
        description="Run checkstyle with layering violations">
        <mkdir dir="${results.dir}"/>

        <checkstyle config="${imported.basedir}/checkstyleWithLayeringViolations.xml" failonviolation="true" >
            <fileset dir="${common.src.dir}" includes="**/*.java" />
            <formatter type="xml" toFile="${results.dir}/checkstyle-errors.xml" />
            <formatter type="plain" usefile="false" />
        </checkstyle>
        
        <checkstyle config="${app.dir}/checkstyleWithLayeringViolations.xml" failonviolation="true" classpathref="checkstyle.classpath">
            <fileset dir="${app.src.dir}" includes="**/*.java" />
            <formatter type="xml" toFile="${results.dir}/checkstyle-errors.xml" />
            <formatter type="plain" usefile="false" />
        </checkstyle>
        <fail if="checkstyle.failed" message="Checkstyle failed" />
    </target>

<!-- TODO figure out a way to not be dependent on a version -->

    <target name="jslint">
        <taskdef name="jslint" classname="com.googlecode.jslint4java.ant.JSLintTask" classpath="${build.lib.dir}/jslint4java-1.3.3.jar" />
        <fileset id="file.list.js" dir="${app.static.dir}" excludes="**/3p/**/*.js" includes="**/*.js">
                <exclude name="WebHelp/*.js"/>
                <exclude name="WebHelp/**/*.js"/>
        </fileset>
        <!-- run jslint if and only if there is a static directory that contains some javascript files -->
        <if>
            <and>
                <resourceexists>
                    <file file="${app.static.dir}" />
                </resourceexists>
                <resourcecount refid="file.list.js" when="greater" count="0" />
            </and>
            <then>
                <mkdir dir="${results.dir}" /> <!-- no earthly reason this should fail for a missing directory -->
                <jslint haltOnFailure="${jslint.fatal}" options="browser, sub, forin">
                    <predef>$$j,Class</predef>
                    <formatter type="xml" destFile="${results.dir}/jslint-errors.xml" />
                    <formatter type="plain"/>
                    <fileset refid="file.list.js" />
                </jslint>
            </then>
        </if>
        <!-- check for direct use of jQuery get/post in any templates or JS files that exist -->
        <exec executable="grep"
              outputproperty="build.js.grep.output"
              resultproperty="build.js.grep.return"
              failonerror="false">
           <arg value="-r" />
           <arg value="-s" /> <!-- do not fail if one of these properties is not set -->
           <arg value="${app.freemarker.dir}" />
           <arg value="${app.static.dir}/js" />
           <arg value="-F" />
           <arg value="-e" />
           <arg value="$j.get" />
           <arg value="-e" />
           <arg value="$j.post" />
           <arg value="-e" />
           <arg value="$j.ajax" />
           <arg value="--exclude" />
           <arg value="global_ready.js" />
           <arg value="--exclude" />
           <arg value="math-utilities.js" />
           <arg value="--exclude" />
           <arg value="OATimeoutDetect.js" />
        </exec>
        <condition property="build.js.errors">
            <and>
                <equals arg1="0" arg2="${build.js.grep.return}" />
                <istrue value="${jqueryajax.fatal}" />
            </and>
        </condition>
        <fail if="build.js.errors" >
            ${build.js.grep.output}
        </fail>
    </target>
    
    <!-- Don't use this for now... -->
    <target name="jslint-css">
        <taskdef name="jslint" classname="com.googlecode.jslint4java.ant.JSLintTask" classpath="${build.lib.dir}/jslint4java-1.3.3.jar" />
        <jslint options="css">
            <formatter type="plain" destfile="${results.dir}/jslint_css.out" />
            <fileset dir="${app.static.dir}" includes="**/*.css" />
            <fileset dir="${common.static.dir}" includes="**/*.css" />
        </jslint>
    </target>

    <target name="template-lint"
        description="Check templates for static URLS and any other bad behaviors" >
        <exec executable="grep"
              outputproperty="build.template.grep.output"
              resultproperty="build.template.grep.return"
              failonerror="false">
           <arg value="-n" />
           <arg value="-r" />
           <arg value="-s" /> <!-- succeed silently if app.freemarker.dir is unset -->
           <arg value="${app.freemarker.dir}" />
           <!-- check for hard-coding of the context name -->
           <arg value="-e" />
           <arg value="/${servlet.name}" />
           <!-- check for manual imports of auto-imported utility macros -->
           <arg value="-e" />
           <arg value="/util.ftl" />
           <!-- customization file is the only place those strings are allowed to appear -->
           <arg value="--exclude" />
           <arg value="util_constants.ftl" />
        </exec>
        <condition property="build.template.errors">
            <equals arg1="0" arg2="${build.template.grep.return}" />
        </condition>
        <fail if="build.template.errors" >
            ${build.template.grep.output}
        </fail>
    </target>
    <target name="this-too-shall-pass">
        <echo>
    LUCY:             For now we're healthy.
    BRIAN:            For now we're employed.
    BAD IDEA BEARS:   For now we're happy...
    KATE MONSTER:     If not overjoyed.
    PRINCETON:        And we'll accept the things we cannot avoid,
                      For now...
    GARY COLEMAN:     For now...
    TREKKIE MONSTER:  For now...
    KATE MONSTER:     For now...
    ALL:              But only for now!
        </echo>
    </target>
</project>
