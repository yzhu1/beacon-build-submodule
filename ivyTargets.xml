<?xml version="1.0"?>
<project name="ivy" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath><pathelement path="${build.lib.dir}/ant-contrib.jar"/></classpath>
    </taskdef>
    <!-- these imports aren't necessary but eclipse displays errors if they're not here-->
    <import file="deployTargets.xml"/>
    <import file="dbTargets.xml"/>

    <target name="clean-ivy" depends="clean-ivy-local-repo-jar, clean-ivy-local-repo-web-assets">
        <delete dir="${ivy.lib.dir}" includeemptydirs="true" failonerror="false" />
        <delete file="ivysettings.xml"/>
    </target>

    <target name="clean-ivy-local-repo-jar">
        <delete dir="${ivy.local.repo.dir}/${org.name}/${project.name}" includeemptydirs="true" failonerror="false" />
    </target>

    <target name="clean-ivy-local-repo-web-assets">
        <delete dir="${ivy.local.repo.dir}/${org.name}/${project.name}-web-assets" includeemptydirs="true" failonerror="false" />
    </target>

    <target name="init-ivy" depends="ivy-get-settings, ivy-resolve"/>

<!-- TODO get rid of
    <target name="create-ivy-dirs">
        <mkdir dir="${ivy.lib.compile.dir}" />
        <mkdir dir="${ivy.lib.test.dir}" />
        <mkdir dir="${ivy.lib.run.dir}" />
    </target>
-->

   
    <target name="ivy-get-settings" description="--> retrieve ivysettings.xml from server">
        <ivy:settings id="bootstrap-settings" file="${imported.basedir}/bootstrap-ivy-settings.xml" />
        <ivy:resolve settingsRef="bootstrap-settings" file="${imported.basedir}/bootstrap-ivy-module.xml" />
        <ivy:retrieve settingsRef="bootstrap-settings" />
    </target>

    <target name="ivy-resolve" description="--> retrieve dependencies with ivy" depends="ivy-get-settings, ivy-clean-resolution-cache">
        <ivy:settings id="ivy.settings" file="ivysettings.xml" />
        <!-- copy artifacts from repo(s) to cache -->
        <ivy:resolve settingsRef="ivy.settings" file="conf/ivy.xml" />
        <!-- copy artifacts from cache to destination dir -->
        <ivy:retrieve settingsRef="ivy.settings" sync="true" overwriteMode="always"/>
        <ivy:report todir="${ivy.report.dir}" xsl="true" xml="true" graph="true" dot="true"/>
        <if>
            <isfalse value="${use.eclipse.ivyde.plugin}" />
                <then>
                    <antcall target="rebuild-eclipse-classpath" />
                </then>
        </if>
    </target>

    <target name="rebuild-eclipse-classpath" description="gets run by ivy-resolve if you have use.eclipse.ivyde.plugin=false">
        <if>
            <isset property="cygwin.bash" />
            <then>
                <path id="basedir.path"><pathelement path="${basedir}"/></path>
                <pathconvert targetos="unix" property="basedir.unix" refid="basedir.path"/>
                <exec executable="${cygwin.bash}">
                    <arg value="--login"/>
                    <arg value="-i"/>
                    <arg value="-c"/>
                    <arg value="cd ${basedir.unix}; python ./conf/base/scripts/dev/rebuild_eclipse_classpath.py ./conf/eclipse.classpath.header" />
                </exec>
            </then>
            <else>
                <exec executable="/usr/bin/python" dir="${basedir.unix}">
                    <arg value="conf/base/scripts/dev/rebuild_eclipse_classpath.py" />
                    <arg value="conf/eclipse.classpath.header" />
                </exec>
            </else>
        </if>
    </target>


    <!-- WARNING: Use this with target with caution.
  
                  It will delete all caches, including the resolution cache 
                  as well as the repository cache.
                  If there are several projects that share the same repository
                  cache, then deleting it may cause the other projects to
                  fail unexpectedly.
    -->
    <target name="ivy-clean-all-caches">
        <echo>cleaning ALL ivy caches</echo>
        <ivy:cleancache />
    </target>

    <target name="ivy-clean-resolution-cache" if="update.ivy.dependencies">
        <delete dir="${ivy.resolution.cache.dir}" />
    </target>

    <target name="ivy-publish" depends="clean, clean-ivy, init-ivy, checkstyle, jslint, template-lint, test-unit, build-app-jars, build-test-jars, zip-web-assets, ivy-get-settings">
        <ivy:publish settingsRef="ivy.settings" resolver="ivyrepo"
            update="true" overwrite="true" forcedeliver="true">
            <artifacts pattern="${build.artifacts.dir}/[artifact].[ext]" />
            <artifacts pattern="${build.artifacts.dir}/test/[artifact].[ext]" />
        </ivy:publish>
    </target>

    <target name="ivy-publish-dev" depends="clean, clean-ivy, init-ivy, checkstyle, jslint, template-lint, test-unit, build-app-jars, build-test-jars, zip-web-assets, ivy-get-settings">
        <ivy:publish settingsRef="ivy.settings" resolver="localrepo"
            update="true" overwrite="true" forcedeliver="true">
            <artifacts pattern="${build.artifacts.dir}/[artifact].[ext]" />
            <artifacts pattern="${build.artifacts.dir}/test/[artifact].[ext]" />
        </ivy:publish>
    </target>

    <target name="ivy-clean-deploy-steps" depends="clean, ivy-resolve, unzip-web-assets, deploy"/>
 
</project>
