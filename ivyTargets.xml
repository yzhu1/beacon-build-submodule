<?xml version="1.0"?>
<project name="ivy" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath><pathelement path="${build.lib.dir}/ant-contrib.jar"/></classpath>
    </taskdef>

    <property environment="sys_env" />
    <property file="${app.config.dir}/version.properties" />
    <!-- pick up DPP/13 compliant version numbers from version.properties, and append BUILD_NUMBER (set by Jenkins) -->
    <property name="module.revision.dev" value="dev" />
    <if>
        <isset property="module.revision.major"/>
        <then>
            <if>
            <!-- if the BUILD_NUMBER is set, we are in Jenkins-land: use the DPP/13 version.  If not, assume "dev" -->
                <isset property="sys_env.BUILD_NUMBER" />
                <then>
                    <property name="module.revision.published" value="${module.revision.major}.${module.revision.minor}.${module.revision.revision}-${sys_env.BUILD_NUMBER}" />
                </then>
                <else>
                    <property name="module.revision.published" value="${module.revision.dev}" />
                </else>
            </if>
        </then>
        <else>
            <property name="module.revision.published" value="${project.revision}" />
        </else>
    </if>

    <!-- these imports aren't necessary but eclipse displays errors if they're not here-->
    <import file="deployTargets.xml"/>
    <import file="dbTargets.xml"/>
    <!-- this one is totally necessary, though -->
    <include file="${build-tools.dir.relative}/gitMacros.xml" />

    <property name="ivy.bootstrap.dir" value="${imported.basedir}" />
    <import file="${build-tools.dir.relative}/ivyTargets.xml" />

    <target name="verify-patch-level-public-api-compatibility"
            description="Build publishable artifacts and call shared patch-level verification targets"
            depends="verify-patch-level-changelog-entry, build-app-jars, build-test-jars, java-build-tools-ivy.verify-patch-level-public-api-compatibility"
    />

    <target name="ivy-resolve" description="--> retrieve dependencies with ivy" depends="ivy-get-settings, ivy-clean-resolution-cache, java-build-tools-ivy.ivy-resolve">
        <if>
            <isfalse value="${use.eclipse.ivyde.plugin}" />
                <then>
                    <antcall target="rebuild-eclipse-classpath" />
                </then>
        </if>
    </target>

    <target name="rebuild-eclipse-classpath" description="gets run by ivy-resolve if you have use.eclipse.ivyde.plugin=false">
        <if>
            <isset property="cygwin.bash" />
            <then>
                <path id="basedir.path"><pathelement path="${basedir}"/></path>
                <pathconvert targetos="unix" property="basedir.unix" refid="basedir.path"/>
                <exec executable="${cygwin.bash}">
                    <arg value="--login"/>
                    <arg value="-i"/>
                    <arg value="-c"/>
                    <arg value="cd ${basedir.unix}; python ${app.config.dir}/base/scripts/dev/rebuild_eclipse_classpath.py ${app.config.dir}/eclipse.classpath.header" />
                </exec>
            </then>
            <else>
                <exec executable="/usr/bin/python" dir="${basedir}">
                    <arg value="${common.config.dir}/scripts/dev/rebuild_eclipse_classpath.py" />
                    <arg value="${app.config.dir}/eclipse.classpath.header" />
                </exec>
            </else>
        </if>
    </target>

    <target name="ivy-publish"
            description="Run unit tests, build jar/zip files, and publish to ivy"
            depends="clean, clean-ivy, init-ivy, checkstyle, test-frontend, test-unit, build-app-jars, build-test-jars, zip-web-assets, ivy-get-settings">
        <publish resolver="ivyrepo"/>
    </target>

    <target name="ivy-publish-only" description="Publish to ivy repo, assuming that all resolution, testing and compilation has already been done"
            depends="build-app-jars,build-test-jars,zip-web-assets">
        <publish resolver="ivyrepo" />
    </target>

    <target name="ivy-publish-dev"
            description="Run unit tests, build jar/zip files, and publish to local repository"
            depends="clean, clean-ivy, init-ivy, checkstyle, test-frontend, test-unit, build-app-jars, build-test-jars, zip-web-assets, ivy-get-settings">
        <publish resolver="localrepo" />
    </target>

    <target name="ivy-publish-only-dev" depends="build-app-jars, build-test-jars, zip-web-assets"
            description="Run ivy-publish-dev without first running ivy-resolve and tests, to save time and aggravation (only run it after running publish-dev normally once)">
        <publish resolver="localrepo" />
    </target>

    <target name="ivy-clean-deploy-steps" depends="clean, ivy-resolve, unzip-web-assets, deploy"/>


    <!-- not technically ivy-related -->
    <target name="update-commit-log">
        <!-- set job ID to a placeholder if not actually running in Jenkins (for debugging) -->
        <condition
                property="jenkins.job-id"
                else="FAKE_JENKINS_JOB"
                value="${sys_env.JOB_NAME}-${sys_env.BUILD_NUMBER}">
            <isset property="sys_env.JOB_NAME" />
        </condition>
        <git-retrieve-branch-name />
        <git-retrieve-commit-id />
        <property name='log-message'
          value="build ${jenkins.job-id} built ${git.current.commit} as ${module.revision.published}${line.separator}"
        />
        <echo>Pulling from ${git.current.branch}</echo>
        <git command="pull"><arg value="origin" /> <arg value="${git.current.branch}" /></git>
        <echo message="${git.command.output}"/>
        <echo append="true" file=".commitlog" message="${log-message}" />
    </target>

    <target name="push-commit-log">
        <git-retrieve-branch-name />
        <git command="commit">
            <arg value="-m" />
            <arg value="update .commitlog" />
            <arg value=".commitlog" />
        </git>
        <git-push-to-branch branchname="${git.current.branch}" />
        <echo message="${git.command.output}" />
    </target>

    <target name="fetch-last-published-ivy-file" description="fetch the last-published ivy file, so we can use it to freeze module versions">
        <ivy:resolve
            keep="true"
            inline="true"
            transitive="false"
            organisation="${project.organization}"
            module="${project.name}"
            branch="future"
            type=""
            revision="${publishedRevision}"
        />
        <ivy:retrieve ivypattern="ivy-${project.name}-[revision].[ext]" />
    </target>

</project>
