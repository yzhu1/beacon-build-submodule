# optional over-ride on minification (put in your local build.properties): minify.js = false
minify.js = true

# in cruisecontrol, this is substituted
# by the SVN revision or CC build number
build.number               = local-dev
build.branch               = local-dev
git.revision               = local-dev
git.common.revision        = local-dev
rpm.version                = dev

# externals
tomcat.dir          = ${app.dir}/../tomcat
tomcat.webapp.dir   = ${tomcat.dir}/webapps
tomcat.config.dir   = ${tomcat.dir}/conf
app-specific.tomcat.java.opts = -D${project.name}.env.config.dir=${app.dir}/conf
tomcat.java.opts = ${app-specific.tomcat.java.opts} -Dorg.owasp.esapi.resources=${build.web.assets.unzip.dir}/wgspringcore-web-assets/resources/.esapi -Djavax.net.ssl.trustStore=/opt/wgen/etc/pki/cacerts -Xms128m -Xmx2048m -XX:MaxPermSize=256m -XX:-UseGCOverheadLimit

# paths
lib.dir             = ${ivy.lib.dir}
compile.lib.dir     = ${lib.dir}/compile
test.lib.dir        = ${lib.dir}/test
runtime.lib.dir     = ${lib.dir}/runtime
coverage.lib.dir    = ${lib.dir}/coverage
build.lib.dir       = ${lib.dir}/build
web.assets.lib.dir  = ${lib.dir}/web-assets

app.src.dir         = ${app.dir}/src/main/java
# resources matching this pattern are included in the web jar along with
# the web classes
app.src.build.resources.pattern   = context/**, freemarker/**

common.web.dir      = ${build.web.assets.unzip.dir}/wgspringcore-web-assets/web
app.web.dir         = ${app.dir}/src/main/webapp

common.resources.dir    = ${build.web.assets.unzip.dir}/wgspringcore-web-assets/resources
app.resources.dir       = ${app.dir}/src/main/resources

app.config.dir           = ${app.dir}/conf
app.config.dir.property  = ${servlet.name}.env.config.dir
common.config.dir        = ${app.config.dir}/base
common.config.dir.property = wgspring-webapp-build.env.config.dir

server.config.dir   = ${app.dir}/../tomcat

app.static.dir          = ${app.web.dir}/static
common.static.dir       = ${common.web.dir}/static/common

app.freemarker.dir = ${app.web.dir}/WEB-INF/freemarker
common.freemarker.dir = ${common.web.dir}/WEB-INF/freemarker/common

output.dir = ${app.dir}/target

apache.config.dir = ${imported.basedir}/config

# for oib deployment
deploy.root.dir     = ${output.dir}/${servlet.name}
deploy.classes.dir  = ${deploy.root.dir}/WEB-INF/classes/${servlet.name}
deploy.common.classes.dir = ${deploy.root.dir}/WEB-INF/classes/common
deploy.resources.dir = ${deploy.root.dir}/WEB-INF/classes
deploy.lib.dir       = ${deploy.root.dir}/WEB-INF/lib
deploy.static.dir    = ${tomcat.webapp.dir}/${static.name}
deploy.static.common.dir = ${deploy.static.dir}/common
deploy.static.backup.dir = ${tomcat.webapp.dir}/${static.name}_backup
deploy.scripts.dir    = ${deploy.root.dir}/../scripts

# for packaging
war.outdir          = ${output.dir}
war.exploded.dir =${tomcat.webapp.dir}/${servlet.name}
war.servlet.name = ${servlet.name}.war

jar.outdir = ${output.dir}/jar
jar.classes.dir.main = ${output.dir}/jar/${servlet.name}/classes
jar.classes.dir.common = ${output.dir}/jar/common/classes

# TODO do we need this?
#jar.common.app.name = tt-common
#jar.common.web.name = tt-common-web

fixture.export.dir = ${app.dir}/../outcomes/src/main/resources/fixtures
napi.fixture.export.dir = ${common.resources.dir}/demo

migration.runtime.jar = postgresql-jdbc4-9.0-801.jar

# web assets

build.web.assets.dir             = ${output.dir}/web-assets
build.web.assets.unzip.dir       = ${build.web.assets.dir}/unzip
build.web.assets.content.dir     = ${build.web.assets.dir}/content
build.web.assets.content.dir.web = ${build.web.assets.content.dir}/web
build.web.assets.content.dir.etc = ${build.web.assets.content.dir}/etc
build.web.assets.content.dir.jar = ${build.web.assets.content.dir}/jar
web.assets.zip.dir.prefix.name   = ${project.name}-web-assets
web.assets.zip.name              = ${project.name}-web-assets.zip
web.assets.commit.hash.file      = ${build.web.assets.content.dir.web}/${project.name}-web-assets-commit-hash

# ivy

build.artifacts.dir = ${output.dir}/jar

ivy.lib.dir   =  ${app.dir}/ivy_lib

update.ivy.dependencies = true

# The directory used to store Ivy resolution data, which is used by Ivy 
# to reuse the results of a resolve process.
# It is overwritten each time a new resolve is performed, and should
# never be used by multiple processes at the same time.
#
# It is used in ivysettings.xml
#
# Only change this value if you know what you are doing.
ivy.resolution.cache.dir = ${basedir}/.ivy2/cache/resolution

# used in ivysettings.xml if resolver allrepos is used
ivy.local.repo.dir  =  ${user.home}/.ivy2/local

# Specifies where ivy should retrieve artifacts from.
# It is used in ivysettings.xml
# Valid values: ivyrepo, allrepos
#
# ivyrepo: Retrieve artifacts ONLY from the "main" ivy repo.
#          Use Case: This is used for deployed environments like currentqa,
#                    futureqa, staging, production, etc.
#
# allrepos: Retrieve artifacts from the "main" ivy repo.
#           BUT if it exists in the "local" repo, retrieve that instead.  
#           Use Case: This will only be used for dev purposes... aka on local workstations.
#                     Changes that are still being developed and tested locally, can be published
#                     to the "local" ivy repo, therefore this resolver can be used to retrieve those
#                     jar(s) and/or web asset(s) from the "local" ivy repo.  The rest of the dependencies
#                     will be retrieved from the "main" ivy repo.
#           
ivy.default.resolver = ivyrepo

ivy.report.dir = ${output.dir}/ivy-report

# build settings
build.deprecation   = on
build.optimization  = off
build.compiler      = modern
build.executable    = javac
build.source        = 1.6
build.target        = 1.6
build.no-warnings   = true

# for hot deploy
war.exploded.freemarker.dir = ${war.exploded.dir}/WEB-INF/freemarker
war.exploded.freemarker.common.dir = ${war.exploded.freemarker.dir}/common

grinder.src.dir = ${imported.basedir}/src/test/grinder
grinder.classes.dir = ${output.dir}/grinder

wgspring.analytics.useGoogleAnalytics = true
wgspring.analytics.googleAnalyticsKey =

# version specs for WGen internal JAR dependencies--should be overridden by individual projects as needed.
# by default, get the latest released version of each jar (set this property to "development" in
# conf/default.build.properties to get the bleeding-edge version of everything):
mclass-dependencies.default.revision = [12.0.0,)
mclass-dependencies.napi.revision = [15.0.1,)
mclass-dependencies.mas.revision = ${mclass-dependencies.default.revision}
mclass-dependencies.bends.revision = [14.2.0,)
mclass-dependencies.common-api-java.revision = [12.2.0,)
mclass-dependencies.core-lib-java.revision = [1.2.0,2.0.0[
mclass-dependencies.liveops-api.revision = [1.9.0,2.0.0[

# if false, ivy-resolve will trigger rebuild-eclipse-classpath
use.eclipse.ivyde.plugin = false
